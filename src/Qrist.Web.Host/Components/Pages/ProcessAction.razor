@rendermode InteractiveServer
@page "/Todoist/ProcessAction/{SessionId}"
@using System.Threading
@using Markdig
@using Qrist.Interfaces
@inject IQristApplication QristApplication
@inject NavigationManager NavigationManager

<PageTitle>Qrist</PageTitle>

<img src="todoist-logo.png" height="36px" alt="Todoist logo"/>

<p>@((MarkupString)_confirmationMessage)</p>
<hr/>
<p class="confirm-footer">
    <a class="todoist-button" @onclick="@(ConfirmActionAsync)">Confirm</a>
</p>

@code {

    [Parameter] public string SessionId { get; set; }

    private Guid? _sessionId;

    private string _confirmationMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (Guid.TryParse(SessionId, out var sessionId))
        {
            _sessionId = sessionId;

            try
            {
                var confirmationMessage =
                    await
                        QristApplication
                            .GetQrCodeActionConfirmationAsync(
                                sessionId,
                                CancellationToken.None
                            );

                _confirmationMessage =
                    Markdown
                        .ToHtml(confirmationMessage);

                StateHasChanged();
            }
            catch (Exception)
            {
                NavigationManager
                    .NavigateTo("/Error", replace: true);
            }
        }
    }

    private async Task ConfirmActionAsync()
    {
        if (_sessionId.HasValue)
        {
            try
            {
                await
                    QristApplication
                        .ProcessQrCodeActionAsync(
                            _sessionId.Value,
                            CancellationToken.None
                        );

                NavigationManager
                    .NavigateTo("/Success", replace: true);
            }
            catch (NavigationException)
            {
                throw;
            }
            catch (Exception)
            {
                NavigationManager
                    .NavigateTo("/Error", replace: true);
            }
        }
    }

}